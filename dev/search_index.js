var documenterSearchIndex = {"docs":
[{"location":"#ModelingToolkitInputs.jl","page":"Home","title":"ModelingToolkitInputs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ModelingToolkitInputs.jl provides support for driving ModelingToolkit model inputs with data in determinate (data known upfront) and indeterminate form (data streamed at runtime).","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"ModelingToolkitInputs\")","category":"page"},{"location":"#Real-time-Input-Handling-During-Simulation","page":"Home","title":"Real-time Input Handling During Simulation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are two approaches to handling inputs during simulation:","category":"page"},{"location":"#Determinate-Form:-Using-Input-Objects","page":"Home","title":"Determinate Form: Using Input Objects","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When all input values are known beforehand, you can use the Input type to specify input values at specific time points. The solver will automatically apply these values using discrete callbacks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ModelingToolkit\nusing ModelingToolkit: t_nounits as t, D_nounits as D\nusing ModelingToolkitInputs\nusing OrdinaryDiffEq\nusing Plots\n\n# Define system with an input variable\n@variables x(t) [input=true]\n@variables y(t) = 0\n\neqs = [D(y) ~ x]\n\n# Compile with inputs specified\n@mtkcompile sys=InputSystem(eqs, t, [x, y], []) inputs=[x]\n\nprob = ODEProblem(sys, [], (0, 4))\n\n# Create an Input object with predetermined values\ninput = Input(sys.x, [1, 2, 3, 4], [0, 1, 2, 3])\n\n# Solve with the input - solver handles callbacks automatically\nsol = solve(prob, [input], Tsit5())\n\nplot(sol; idxs = [x, y])","category":"page"},{"location":"","page":"Home","title":"Home","text":"Multiple Input objects can be passed in a vector to handle multiple input variables simultaneously.","category":"page"},{"location":"#Indeterminate-Form:-Manual-Input-Setting-with-set_input!","page":"Home","title":"Indeterminate Form: Manual Input Setting with set_input!","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When input values need to be computed on-the-fly or depend on external data sources, you can manually set inputs during integration using set_input!. This approach requires explicit control of the integration loop.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Initialize the integrator\nintegrator = init(prob, Tsit5())\n\n# Manually set inputs and step through time\nset_input!(integrator, sys.x, 1.0)\nstep!(integrator, 1.0, true)\n\nset_input!(integrator, sys.x, 2.0)\nstep!(integrator, 1.0, true)\n\nset_input!(integrator, sys.x, 3.0)\nstep!(integrator, 1.0, true)\n\nset_input!(integrator, sys.x, 4.0)\nstep!(integrator, 1.0, true)\n\n# IMPORTANT: Must call finalize! to save all input callbacks\nfinalize!(integrator)\n\nplot(sol; idxs = [x, y])","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Always call `finalize!`\nWhen using set_input!, you must call finalize! after integration is complete. This ensures that all discrete callbacks associated with input variables are properly saved in the solution. Without this call, input values may not be correctly recorded when querying the solution.","category":"page"},{"location":"#Benefits-of-ModelingToolkitInputs-vs.-DataInterpolations","page":"Home","title":"Benefits of ModelingToolkitInputs vs. DataInterpolations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are several reasons why one would want to input data into their model using ModelingToolkitInputs:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The same System (or InputSystem) can be used in both determinate and indeterminate forms without requiring any changes or modifications to the system.  This makes it very convenient to use and test the system against previously recorded data and be sure the exact same system will work in practice with streaming data.\nRun several large datasets using ModelingToolkitInputs requires only 1 step: (1) call solve with each dataset.  When the data is included in the system using an interpolation object requires 2 steps: (1) remake the problem with new data, (2) then call solve.  \nThe 2 step process described above is significantly slower than the singal step solve with ModelingToolkitInputs\nFinally using Interpolation requires that the data length be a constant for all datasets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ModelingToolkit\nusing ModelingToolkit: t_nounits as t, D_nounits as D\nusing ModelingToolkitInputs\nusing ModelingToolkitStandardLibrary.Blocks\nusing DataInterpolations\nusing OrdinaryDiffEq\nusing Plots\n\nfunction MassSpringDamper(; name)\n    \n    vars = @variables begin\n        f(t), [input = true] \n        x(t)=0 \n        dx(t)=0\n        ddx(t)\n    end\n    pars = @parameters m=10 k=1000 d=1\n\n    eqs = [ddx * 10 ~ k * x + d * dx + f\n           D(x) ~ dx\n           D(dx) ~ ddx\n           ]\n\n    System(eqs, t, vars, pars; name)\nend\n\nfunction MassSpringDamperSystem(data, time; name)\n    @named src = ParametrizedInterpolation(ConstantInterpolation, data, time)\n    @named clk = ContinuousClock()\n    @named model = MassSpringDamper()\n\n    eqs = [model.f ~ src.output.u\n           connect(clk.output, src.input)]\n\n    System(eqs, t; name, systems = [src, clk, model])\nend\n\ndt = 4e-4\ntime = collect(0:dt:0.1)\ndata = 2 .* sin.(2 * pi * time * 100)\n\n@mtkcompile sys = MassSpringDamperSystem(data, time)\nprob = ODEProblem(sys, [], (0, time[end]))\nsol1 = solve(prob)\nplot(sol1; idxs=sys.model.dx)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now let's record how much time it takes to replace the data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using BenchmarkTools\ndata2 = 100 .* one.(data)\nsol2 = @btime begin \n    prob2 = remake(prob, p = [sys.src.data => data2])\n    solve(prob2)\nend\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"As can be seen, this takes over 300ms to run a new dataset.  In comparison using ModelingToolkitInputs only takes just over 1ms for each dataset run.  Additionally note, we can run the MassSpringDamper component directly without needing to wrap it in another component, making it very simple to run in determiniate or indeterminate forms.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"@named sysi = MassSpringDamper()\nsysi = mtkcompile(InputSystem(sysi); inputs=ModelingToolkit.inputs(sysi))\nprobi = ODEProblem(sysi, [], (0, time[end]))\n\nsol1i = @btime begin \n    in1 = Input(sysi.f, data, time)\n    solve(probi, [in1])\nend\nsol2i = @btime begin \n    in2 = Input(sysi.f, data2, time)\n    solve(probi, [in2])\nend\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"As can be seen, the results are the same...","category":"page"},{"location":"","page":"Home","title":"Home","text":"plot(sol2; idxs=sys.model.dx)\nplot!(sol2i; idxs=sysi.dx)","category":"page"},{"location":"#Discontinuities","page":"Home","title":"Discontinuities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"One important detail to point out is that the input is discontinuous.  Note that the interpolation type set is ConstantInterpolation to provide the true form of the data input.  In order to properly numerically solve this, the solver needs to know when these discontinuites occur.  Currently this is not automatically provided by ModelingToolkit interpolation, and it hasn't been added manually in this comparison.  As a result the DataInterpolations solution is done in 122 steps.  The use of ModelingToolkitInputs however does provide the correct solving for discontinuities becuase the use of DiscreteCallbacks is used at each discrete data input time.  Therefore the solution is given in n=2*length(time) because a solve is done on each side of the discrete steps.  The difference in solution quality can be seen when comparing sol1 and sol1i where the input force is a sine wave.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"plot(sol1.t, sol1[sys.model.dx]; marker=:dot, label=\"MTK + Interpolation (n=$(length(sol1.t)))\")\nplot!(sol1i.t, sol1i[sysi.dx]; marker=:dot, label=\"ModelingToolkitInputs (n=$(length(sol1i.t)))\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Therefore the end result is ModelingToolkitInputs offers a faster, more convenient way to provide data input with a higher accuracy solution provided automatically.  ","category":"page"}]
}
